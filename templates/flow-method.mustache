static async {{&methodName}}(
{{#hasParameters}}
  parameters: {
    {{#parameters}}
      {{^isSingleton}}'{{&camelCaseName}}'{{&cardinality}}: {{#flowType}}{{> type}}{{/flowType}},{{/isSingleton}}
    {{/parameters}}
  }
{{/hasParameters}}
): Promise<{{#methodResponse}}"{{&methodResponse}}"{{/methodResponse}}{{#methodFlowType}}{{> type}}{{/methodFlowType}}{{^methodResponse}}{{^methodFlowType}}any{{/methodFlowType}}{{/methodResponse}}> {
  let path = '{{&path}}';
  let body;
  let query = {};
  let headers = {};
  {{#parameters}}
    {{#required}}
      if(parameters['{{&camelCaseName}}'] === undefined) {
        throw new Error('Missing required {{&paramType}} parameter: {{&camelCaseName}}');
      }
    {{/required}}

    {{#isPathParameter}}
      path = path.replace('{{=<% %>=}}{<%&name%>}<%={{ }}=%>', `${parameters['{{&camelCaseName}}']}`);
    {{/isPathParameter}}

    {{#isHeaderParameter}}
        {{#isSingleton}}
            headers['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}
        {{^isSingleton}}
            if(parameters['{{&camelCaseName}}'] !== undefined) {
                headers['{{&name}}'] = parameters['{{&camelCaseName}}'];
            }
        {{/isSingleton}}
    {{/isHeaderParameter}}

    {{#isBodyParameter}}
      if(parameters['{{&camelCaseName}}'] !== undefined) {
        body = parameters['{{&camelCaseName}}'];
      }
    {{/isBodyParameter}}

    {{#isQueryParameter}}
      if(parameters['{{&camelCaseName}}'] !== undefined) {
        query['{{&name}}'] = parameters['{{&camelCaseName}}'];
      }
    {{/isQueryParameter}}

  {{/parameters}}

  return await this.request(path, '{{method}}', query, body, headers);
}
