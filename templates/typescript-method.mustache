{{&methodName}}URL(parameters: {
{{#parameters}}{{^isSingleton}}'{{&camelCaseName}}'{{&cardinality}}: {{> type}},
{{/isSingleton}}{{/parameters}}
$queryParameters?: {}
}): string {
    let queryParameters = {};
    let path = '{{&path}}';
    {{#parameters}}
        {{#isQueryParameter}}
            {{#isSingleton}}
                queryParameters['{{&name}}'] = '{{&singleton}}';
            {{/isSingleton}}
            {{^isSingleton}}
                {{#isPatternType}}
                    Object.keys(parameters).forEach(function(parameterName) {
                    if(new RegExp('{{&pattern}}').test(parameterName)){
                    queryParameters[parameterName] = parameters[parameterName];
                    }
                    });
                {{/isPatternType}}
                {{^isPatternType}}
                    if(parameters['{{&camelCaseName}}'] !== undefined){
                    queryParameters['{{&name}}'] = parameters['{{&camelCaseName}}'];
                    }
                {{/isPatternType}}
            {{/isSingleton}}
        {{/isQueryParameter}}

        {{#isPathParameter}}
            path = path.replace('{{=<% %>=}}{<%&name%>}<%={{ }}=%>', parameters['{{&camelCaseName}}']);
        {{/isPathParameter}}
    {{/parameters}}
    let keys = Object.keys(queryParameters);
    return this.domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')): '');
};

/**
* {{&summary}}
* @method
* @name {{&className}}#{{&methodName}}
{{#parameters}}
    {{^isSingleton}} * @param {{=<% %>=}}{<%&type%>}<%={{ }}=%> {{&camelCaseName}} - {{&description}}{{/isSingleton}}
{{/parameters}}
*
*/
{{&methodName}}(parameters: {
{{#parameters}}{{^isSingleton}}'{{&camelCaseName}}'{{&cardinality}}: {{> type}},
{{/isSingleton}}{{/parameters}}
    $queryParameters?: {},
    $domain?: string
}): Promise<request.Response> {
    const domain = parameters.$domain ? parameters.$domain : this.domain;
    const errorHandlers = this.errorHandlers;
    const request = this.request;
    const path = '{{&path}}';
    let body;
    let queryParameters = {};
    let headers = {};
    let form = {};
    return new Promise(function(resolve, reject) {
{{#headers}}
    headers['{{&name}}'] = {{&value}};
{{/headers}}

{{#parameters}}

    {{#isQueryParameter}}
        {{#isSingleton}}
            queryParameters['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}
        {{^isSingleton}}
            {{#isPatternType}}
                Object.keys(parameters).forEach(function(parameterName) {
                    if(new RegExp('{{&pattern}}').test(parameterName)){
                        queryParameters[parameterName] = parameters[parameterName];
                    }
                });
            {{/isPatternType}}
            {{^isPatternType}}
                if(parameters['{{&camelCaseName}}'] !== undefined){
                    queryParameters['{{&name}}'] = parameters['{{&camelCaseName}}'];
                }
            {{/isPatternType}}
        {{/isSingleton}}
    {{/isQueryParameter}}

    {{#isPathParameter}}
        path = path.replace('{{=<% %>=}}{<%&name%>}<%={{ }}=%>', parameters['{{&camelCaseName}}']);
    {{/isPathParameter}}

    {{#isHeaderParameter}}
        {{#isSingleton}}
            headers['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}
        {{^isSingleton}}
            if(parameters['{{&camelCaseName}}'] !== undefined){
                headers['{{&name}}'] = parameters['{{&camelCaseName}}'];
            }
        {{/isSingleton}}
    {{/isHeaderParameter}}

    {{#isBodyParameter}}
        if(parameters['{{&camelCaseName}}'] !== undefined){
            body = parameters['{{&camelCaseName}}'];
        }
    {{/isBodyParameter}}

    {{#isFormParameter}}
        {{#isSingleton}}
            form['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}
        {{^isSingleton}}
            if(parameters['{{&camelCaseName}}'] !== undefined){
                form['{{&name}}'] = parameters['{{&camelCaseName}}'];
            }
        {{/isSingleton}}
    {{/isFormParameter}}

    {{#required}}
        if(parameters['{{&camelCaseName}}'] === undefined){
            reject(new Error('Missing required {{&paramType}} parameter: {{&camelCaseName}}'));
            return;
        }
    {{/required}}

{{/parameters}}

if(parameters.$queryParameters) {
    Object.keys(parameters.$queryParameters).forEach(function(parameterName){
        var parameter = parameters.$queryParameters[parameterName];
        queryParameters[parameterName] = parameter;
    });
}

    request('{{method}}', domain + path, body, headers, queryParameters, form, reject, resolve, errorHandlers);

    });
};
