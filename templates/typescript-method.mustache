/**
* {{&summary}}
* @method
{{#externalDocs}}
* @see {@link {{&url}}|{{#description}}{{&description}}{{/description}}{{^description}}External docs{{/description}}}
{{/externalDocs}}
* @name {{&className}}#{{&methodName}}
{{#parameters}}
    {{^isSingleton}} * @param {{=<% %>=}}{<%&type%>}<%={{ }}=%> {{&camelCaseName}} - {{&description}}{{/isSingleton}}
{{/parameters}}
*/
{{&methodName}}(parameters: {
{{#parameters}}{{^isSingleton}}'{{&camelCaseName}}'{{&cardinality}}: {{> type}},
{{/isSingleton}}{{/parameters}}
    $queryParameters?: {}
}{{#angular}}, opts: {
     $timeout?: number;
     $refresh?: boolean;
     $cache?: {
        get:(key: string) => string|Object
        put:(key: string, value: string|Object, options?: {}) => void;
     };
     $cacheItemOpts?: {};
} = {}
{{/angular}}): {{#angular}}ng.IPromise<{{&tsType}}{{/angular}}{{^angular}}Promise<request.Response{{/angular}}> {
    let domain = this.domain;
    let path = '{{&path}}';
    {{#hasBody}}
    let body;
    {{/hasBody}}
    let queryParameters = {};
    let headers = {};
    {{#hasForm}}
    let form = {};
    {{/hasForm}}
{{#angular}}
    let deferred = this.$q.defer();

{{/angular}}
{{^angular}}
    return new Promise(function(resolve, reject) {
{{/angular}}
{{#headers}}
    headers['{{&name}}'] = [{{&value}}];
{{/headers}}

{{#parameters}}
    {{! TypeScript should assert required parameters at compile-time #required} }
        if(queryParameters['{ {&camelCaseName} } '] === undefined){
            reject(new Error('Missing required { {&paramType} } parameter: { {&camelCaseName} }'));
            return;
        }
    { {/required}}

    {{#isQueryParameter}}
        {{#isSingleton}}
            queryParameters['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}
        {{^isSingleton}}
            {{#isPatternType}}
                Object.keys(parameters).forEach(function(parameterName) {
                    if(new RegExp('{{&pattern}}').test(parameterName)){
                        queryParameters[parameterName] = parameters[parameterName];
                    }
                });
            {{/isPatternType}}
            {{^isPatternType}}
                {{#required}}
                queryParameters['{{&name}}'] = parameters['{{&camelCaseName}}'];
                {{/required}}
                {{^required}}
                if(parameters['{{&camelCaseName}}'] !== undefined){
                    queryParameters['{{&name}}'] = parameters['{{&camelCaseName}}'];
                }
                {{/required}}
            {{/isPatternType}}
        {{/isSingleton}}
    {{/isQueryParameter}}

    {{#isPathParameter}}
        path = path.replace('{{=<% %>=}}{<%&name%>}<%={{ }}=%>', parameters['{{&camelCaseName}}']);
    {{/isPathParameter}}

    {{#isHeaderParameter}}
        {{#isSingleton}}
            headers['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}
        {{^isSingleton}}
            {{#required}}
            headers['{{&name}}'] = parameters['{{&camelCaseName}}'];
            {{/required}}
            {{^required}}
            if(parameters['{{&camelCaseName}}'] !== undefined){
                headers['{{&name}}'] = parameters['{{&camelCaseName}}'];
            }
            {{/required}}
        {{/isSingleton}}
    {{/isHeaderParameter}}

    {{#isBodyParameter}}
        {{#required}}
        body = parameters['{{&camelCaseName}}'];
        {{/required}}
        {{^required}}
        if(parameters['{{&camelCaseName}}'] !== undefined){
            body = parameters['{{&camelCaseName}}'];
        }
        {{/required}}
    {{/isBodyParameter}}

    {{#isFormParameter}}
        {{#isSingleton}}
            form['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}
        {{^isSingleton}}
            {{#required}}
            form['{{&name}}'] = parameters['{{&camelCaseName}}'];
            {{/required}}
            {{^required}}
            if(parameters['{{&camelCaseName}}'] !== undefined){
                form['{{&name}}'] = parameters['{{&camelCaseName}}'];
            }
            {{/required}}
        {{/isSingleton}}
    {{/isFormParameter}}
{{/parameters}}

if(parameters.$queryParameters) {
    Object.keys(parameters.$queryParameters).forEach(function(parameterName){
        var parameter = parameters.$queryParameters[parameterName];
        queryParameters[parameterName] = parameter;
    });
}
{{> request}}
{{^angular}}
    });
{{/angular}}
}
