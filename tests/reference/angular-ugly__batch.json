/*jshint -W069 */
/*global angular:false */
angular.module('Test', [])
.factory('Test', ['$q', '$http', '$rootScope', function($q, $http, $rootScope){
    'use strict';

    /**
     * <p>These resources can be used to perform batch operations. The endpoint of these resources is based on your project name. For instance, if your 28.io project is named <code>myproject</code>, your endpoint for this API will be will be: <code>http://myproject.28.io/v1/_batch</code>.</p>
     * @class Test
     * @param {(string|object)} [domainOrOptions] - The project domain or options object. If object, see the object's optional properties.
     * @param {string} [domainOrOptions.domain] - The project domain
     * @param {string} [domainOrOptions.cache] - An angularjs cache implementation
     * @param {object} [domainOrOptions.token] - auth token - object with value property and optional headerOrQueryName and isQuery properties
     * @param {string} [cache] - An angularjs cache implementation
     */
    var Test = (function(){
        function Test(options, cache){
            var domain = (typeof options === 'object') ? options.domain : options;
            this.domain = typeof(domain) === 'string' ? domain : 'http://portal.28.io/v1';
            if(this.domain.length === 0) {
                throw new Error('Domain parameter must be specified as a string.');
            }
            cache = cache || ((typeof options === 'object') ? options.cache : cache);
            this.cache = cache;
        }

        Test.prototype.$on = function($scope, path, handler){
            var url = this.domain + path;
            $scope.$on(url, function(){
                handler();
            });
            return this;
        };

        Test.prototype.$broadcast = function(path){
            var url = this.domain + path;
            //cache.remove(url);
            $rootScope.$broadcast(url);
            return this;
        };

        Test.transformRequest = function(obj) {
            var str = [];
            for(var p in obj) {
                var val = obj[p];
                if(angular.isArray(val)) {
                   val.forEach(function(val){
                     str.push(encodeURIComponent(p) + "=" + encodeURIComponent(val));
                   });
                } else {
                   str.push(encodeURIComponent(p) + "=" + encodeURIComponent(val));
                }
            }
            return str.join("&");
        };


/**
 * Import project contents from an archive
 * @method
 * @name Test#importProject
 * @param {string} url - The archive url.
 * @param {string} archive - The archive contents.
 * @param {string} root - The path inside the archive that contains the modules and queries folders. Use '/' as folder separator.
 * @param {string} overwrite - Whether to overwrite current project queries and modules. Default is true.
 * @param {boolean} deleteOrphaned - Whether to delete orphaned file or not. Default is false.
 * @param {boolean} simulate - Whether to simulate the operation or not. Default is false.
 * @param {string} token - A project token.
 * @param {string} contentType - <p>These resources can be used to perform batch operations. The endpoint of these resources is based on your project name. For instance, if your 28.io project is named <code>myproject</code>, your endpoint for this API will be will be: <code>http://myproject.28.io/v1/_batch</code>.</p>
 * 
 */
 Test.prototype.importProject = function(parameters){
    if(parameters === undefined) {
        parameters = {};
    }
    var deferred = $q.defer();
    
    var domain = this.domain;
    var path = '/_batch/project';
    
    var body;
    var queryParameters = {};
    var headers = {};
    var form = {};



       
                if(parameters['url'] !== undefined){
                    queryParameters['url'] = parameters['url'];
                }
        
        
        


 
       
        
        
        
            if(parameters['archive'] !== undefined){
                body = parameters['archive'];
            }


 
       
                if(parameters['root'] !== undefined){
                    queryParameters['root'] = parameters['root'];
                }
        
        
        


 
       
                if(parameters['overwrite'] !== undefined){
                    queryParameters['overwrite'] = parameters['overwrite'];
                }
        
        
        


 
       
                if(parameters['deleteOrphaned'] !== undefined){
                    queryParameters['delete-orphaned'] = parameters['deleteOrphaned'];
                }
        
        
        


 
       
                if(parameters['simulate'] !== undefined){
                    queryParameters['simulate'] = parameters['simulate'];
                }
        
        
        


 
       
                if(parameters['token'] !== undefined){
                    queryParameters['token'] = parameters['token'];
                }
        
        
        


        if(parameters['token'] === undefined){
            deferred.reject(new Error('Missing required query parameter: token'));
            return deferred.promise;
        }
 
       
        
        
                if(parameters['contentType'] !== undefined){
                    headers['Content-Type'] = parameters['contentType'];
                }
        


 
    
    if(parameters.$queryParameters) {
        Object.keys(parameters.$queryParameters)
        .forEach(function(parameterName){
            var parameter = parameters.$queryParameters[parameterName];
            queryParameters[parameterName] = parameter;
        });
    }

var url = domain + path;
var options = {
    timeout: parameters.$timeout,
    method: 'PUT',
    url: url,
    params: queryParameters,
    data: body,
    headers: headers
};
if(Object.keys(form).length > 0) {
   options.data = form;
   options.headers['Content-Type'] = 'application/x-www-form-urlencoded';
   options.transformRequest = Test.transformRequest;
}
$http(options)
.success(function(data, status, headers, config){
    deferred.resolve(data);
    if(parameters.$cache !== undefined) {
        parameters.$cache.put(url, data, parameters.$cacheItemOpts ? parameters.$cacheItemOpts : {});
    }
})
.error(function(data, status, headers, config){
    deferred.reject({
        status: status,
        headers: headers,
        config: config,
        body: data
    });
});
    
    return deferred.promise; 
 };

	return Test;
    })();

    return Test;
}]);
